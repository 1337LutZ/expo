{"version":3,"file":"configureIosSplashScreen.js","sourceRoot":"","sources":["../src/configureIosSplashScreen.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\nimport chalk from 'chalk';\nimport colorString from 'color-string';\nimport fs from 'fs-extra';\nimport { projectConfig } from '@react-native-community/cli-platform-ios';\n\nimport { ResizeMode } from './constants';\nimport { replaceOrInsertInFile, writeToFile, COMMENTS } from './helpers';\n\n// each filename is relational according to iOS root project directory\nconst FILENAMES = {\n  INFO_PLIST: './Info.plist',\n  SPLASHSCREEN_PLIST: './SplashScreen.plist',\n  STORYBOARD: './Base.lproj/SplashScreen.storyboard',\n  IMAGESET: './Images.xcassets/SplashScreen.imageset',\n  IMAGESET_CONTENTS: './Images.xcassets/SplashScreen.imageset/Contents.json',\n  PNG: './splashscreen.png',\n};\n\n/**\n * Configures:\n * - [FILENAMES.INFO_PLIST] to show [FILENAMES.STORYBOARD] filename as Splash/Launch Screen\n * - [FILENAMES.SPLASHSCREEN_PLIST] to contain all options that needs to be available during app runtime.\n */\nasync function configurePlists(iosProjectPath: string, resizeMode: ResizeMode) {\n  await replaceOrInsertInFile(path.resolve(iosProjectPath, FILENAMES.INFO_PLIST), {\n    replaceContent: '<string>SplashScreen</string>',\n    replacePattern: /(?<=<key>UILaunchStoryboardName<\\/key>(.|\\n)*?)<string>.*?<\\/string>/gm,\n    insertContent: `  <key>UILaunchStoryboardName</key>\\n  <string>SplashScreen</string>\\n`,\n    insertPattern: /<\\/dict>/gm,\n    insertBeforeLastOccurrence: true,\n  });\n\n  await writeToFile(\n    path.resolve(iosProjectPath, FILENAMES.SPLASHSCREEN_PLIST),\n    `${COMMENTS.wrapXML(COMMENTS.FILE_TOP_NO_MODIFY)}\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n  <key>ResizeMode</key>\n  <string>${resizeMode.toUpperCase()}</string>\n</dict>\n</plist>\n`\n  );\n}\n\nasync function configureStoryboard(\n  iosProjectPath: string,\n  resizeMode: ResizeMode,\n  backgroundColor: string,\n  imageAvailable: boolean\n) {\n  let contentMode;\n  switch (resizeMode) {\n    case ResizeMode.CONTAIN:\n      contentMode = 'scaleAspectFit';\n      break;\n    case ResizeMode.COVER:\n      contentMode = 'scaleAspectFill';\n      break;\n    default:\n      console.log(\n        chalk.red(`resizeMode = ${chalk.yellow(resizeMode)} is not supported for iOS platform.`)\n      );\n      return;\n  }\n\n  const color = colorString.get(backgroundColor)?.value;\n  if (!color) {\n    console.log(chalk.red(`backgroundColor is invalid.`));\n    return;\n  }\n\n  const [r, g, b, a] = color;\n  const red = r / 255;\n  const green = g / 255;\n  const blue = b / 255;\n  const alpha = a;\n\n  await writeToFile(\n    path.resolve(iosProjectPath, FILENAMES.STORYBOARD),\n    `${COMMENTS.wrapXML(COMMENTS.FILE_TOP_NO_MODIFY)}\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<document\n  type=\"com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB\"\n  version=\"3.0\"\n  toolsVersion=\"15705\"\n  targetRuntime=\"iOS.CocoaTouch\"\n  propertyAccessControl=\"none\"\n  useAutolayout=\"YES\"\n  launchScreen=\"YES\"\n  useTraitCollections=\"YES\"\n  useSafeAreas=\"YES\"\n  colorMatched=\"YES\"\n  initialViewController=\"EXPO-VIEWCONTROLLER-1\"\n>\n  <device id=\"retina6_1\" orientation=\"portrait\" appearance=\"light\"/>\n  <dependencies>\n    <deployment identifier=\"iOS\"/>\n    <plugIn identifier=\"com.apple.InterfaceBuilder.IBCocoaTouchPlugin\" version=\"15706\"/>\n    <capability name=\"documents saved in the Xcode 8 format\" minToolsVersion=\"8.0\"/>\n  </dependencies>\n  <scenes>\n    <!--View Controller-->\n    <scene sceneID=\"EXPO-SCENE-1\">\n      <objects>\n        <viewController id=\"EXPO-VIEWCONTROLLER-1\" sceneMemberID=\"viewController\">\n          <imageView\n            key=\"view\"\n            clipsSubviews=\"YES\"\n            userInteractionEnabled=\"NO\"\n            contentMode=\"${contentMode}\"\n            horizontalHuggingPriority=\"251\"\n            verticalHuggingPriority=\"251\"\n            ${imageAvailable ? 'image=\"SplashScreen\"' : ''}\n            id=\"EXPO-IMAGEVIEW-1\"\n          >\n            <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"800\" height=\"1600\"/>\n            <autoresizingMask key=\"autoresizingMask\" flexibleMaxX=\"YES\" flexibleMaxY=\"YES\"/>\n            <color key=\"backgroundColor\" red=\"${red}\" green=\"${green}\" blue=\"${blue}\" alpha=\"${alpha}\" colorSpace=\"custom\" customColorSpace=\"sRGB\"/>\n          </imageView>\n          <size key=\"freeformSize\" width=\"800\" height=\"1600\"/>\n        </viewController>\n        <placeholder placeholderIdentifier=\"IBFirstResponder\" id=\"EXPO-PLACEHOLDER-1\" userLabel=\"First Responder\" sceneMemberID=\"firstResponder\"/>\n      </objects>\n      <point key=\"canvasLocation\" x=\"141\" y=\"130\"/>\n    </scene>\n  </scenes>\n  <resources>\n    <image name=\"SplashScreen\" width=\"600\" height=\"1200\"/>\n  </resources>\n</document>\n`\n  );\n}\n\nasync function configureAssets(iosProjectPath: string, imagePath?: string) {\n  const imageSetPath = path.resolve(iosProjectPath, FILENAMES.IMAGESET);\n\n  // ensure old SplashScreen imageSet is removed\n  if (await fs.pathExists(imageSetPath)) {\n    await fs.remove(imageSetPath);\n  }\n\n  if (imagePath) {\n    await fs.mkdirp(imageSetPath);\n    const contentJson = {\n      images: [\n        {\n          idiom: 'universal',\n          filename: FILENAMES.PNG,\n          scale: '1x',\n        },\n        {\n          idiom: 'universal',\n          scale: '2x',\n        },\n        {\n          idiom: 'universal',\n          scale: '3x',\n        },\n      ],\n      info: {\n        version: 1,\n        author: 'xcode',\n      },\n    };\n\n    await fs.writeFile(\n      path.resolve(iosProjectPath, FILENAMES.IMAGESET_CONTENTS),\n      JSON.stringify(contentJson, null, 2)\n    );\n\n    await fs.copyFile(imagePath, path.resolve(iosProjectPath, FILENAMES.PNG));\n  }\n}\n\nexport default async function configureIosSplashScreen({\n  imagePath,\n  resizeMode,\n  backgroundColor,\n}: {\n  imagePath?: string;\n  resizeMode: ResizeMode;\n  backgroundColor: string;\n}) {\n  const projectRootPath = path.resolve();\n  const xcodeProjPath = projectConfig(projectRootPath, { plist: [] })?.projectPath;\n  if (!xcodeProjPath) {\n    console.log(chalk.red(`Couldn't find iOS project. Cannot configure iOS.`));\n    return;\n  }\n\n  // xcodeProjPath contains path to .xcodeproj directory\n  if (!xcodeProjPath.endsWith('.xcodeproj')) {\n    console.log(chalk.red(`Couldn't find .xcodeproj directory.`));\n    return;\n  }\n  const projectPath = xcodeProjPath.substring(0, xcodeProjPath.length - '.xcodeproj'.length);\n\n  return Promise.all([\n    configurePlists(projectPath, resizeMode),\n    configureStoryboard(projectPath, resizeMode, backgroundColor, !!imagePath),\n    configureAssets(projectPath, imagePath),\n  ]).then(([]) => {\n    \n  });\n}\n"]}